import type { Argument } from './data/internal.js';
import type { Inputs } from './Inputs.js';
import { createPure } from './pure.js';
import type { Transaction, TransactionObjectArgument } from './Transaction.js';
export declare const Arguments: {
    pure: ReturnType<typeof createPure<(tx: Transaction) => Argument>>;
    object: {
        (value: import("./Transaction.js").TransactionObjectInput): TransactionObjectArgument;
        system(): TransactionObjectArgument;
        clock(): TransactionObjectArgument;
        random(): TransactionObjectArgument;
        denyList(): TransactionObjectArgument;
        option({ type, value }: {
            type: string;
            value: import("./Transaction.js").TransactionObjectInput | null;
        }): (tx: Transaction) => import("./Transaction.js").TransactionResult;
    };
    sharedObjectRef: (args_0: {
        objectId: string;
        mutable: boolean;
        initialSharedVersion: number | string;
    }) => (tx: Transaction) => {
        $kind: "Input";
        Input: number;
        type?: "object";
    };
    objectRef: (args_0: {
        version: string | number;
        objectId: string;
        digest: string;
    }) => (tx: Transaction) => {
        $kind: "Input";
        Input: number;
        type?: "object";
    };
    receivingRef: (args_0: {
        version: string | number;
        objectId: string;
        digest: string;
    }) => (tx: Transaction) => {
        $kind: "Input";
        Input: number;
        type?: "object";
    };
};
