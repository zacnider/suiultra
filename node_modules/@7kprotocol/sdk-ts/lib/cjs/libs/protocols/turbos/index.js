"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurbosContract = void 0;
const utils_1 = require("@mysten/sui/utils");
const base_1 = require("../base");
const utils_2 = require("../utils");
const sui_1 = require("../../../utils/sui");
const ONE_MINUTE = 60 * 1000;
class TurbosContract extends base_1.BaseContract {
    swap(tx) {
        return __awaiter(this, void 0, void 0, function* () {
            const a2b = this.swapInfo.swapXtoY;
            const { poolId, address } = {
                poolId: this.swapInfo.poolId,
                address: this.currentAccount,
            };
            const { package: PACKAGE_ID, version: VERSION } = this.config.turbos;
            const inputAmount = this.getInputCoinValue(tx);
            const [tokenOut, tokenIn] = tx.moveCall({
                target: `${PACKAGE_ID}::swap_router::swap_${a2b ? "a_b" : "b_a"}_with_return_`,
                typeArguments: this.getTypeParams(),
                arguments: [
                    tx.object(poolId),
                    tx.makeMoveVec({
                        elements: [this.inputCoinObject],
                    }),
                    inputAmount,
                    tx.pure.u64(0),
                    tx.pure.u128((0, utils_2.getDefaultSqrtPriceLimit)(this.swapInfo.swapXtoY).toString()),
                    tx.pure.bool(true),
                    tx.pure.address(this.currentAccount),
                    tx.pure.u64(Date.now() + ONE_MINUTE * 3),
                    tx.object(utils_1.SUI_CLOCK_OBJECT_ID),
                    tx.object(VERSION),
                ],
            });
            sui_1.SuiUtils.transferOrDestroyZeroCoin(tx, this.swapInfo.assetIn, tokenIn, address);
            return tokenOut;
        });
    }
}
exports.TurbosContract = TurbosContract;
