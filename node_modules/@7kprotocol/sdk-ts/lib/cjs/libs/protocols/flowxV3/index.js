"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlowxV3Contract = void 0;
const utils_1 = require("@mysten/sui/utils");
const base_1 = require("../base");
const utils_2 = require("../utils");
const bn_js_1 = require("bn.js");
class FlowxV3Contract extends base_1.BaseContract {
    swap(tx) {
        return __awaiter(this, void 0, void 0, function* () {
            const [coinX, coinY] = this.swapInfo.pool.allTokens;
            const swapXtoY = this.swapInfo.swapXtoY;
            const swapFeeRate = this.swapInfo.extra.swapFeeRate;
            if (!swapFeeRate) {
                throw new Error("swapFeeRate is required");
            }
            const config = this.config.flowx_v3;
            const [coinOut] = tx.moveCall({
                target: `${config.package}::swap_router::swap_exact_input`,
                typeArguments: [
                    swapXtoY ? coinX.address : coinY.address,
                    swapXtoY ? coinY.address : coinX.address,
                ],
                arguments: [
                    tx.object(config.registry),
                    tx.pure.u64(swapFeeRate), // swap fee rate to lookup pool in the registry
                    this.inputCoinObject,
                    tx.pure.u64(0), // min amount out
                    tx.pure.u128((0, utils_2.getDefaultSqrtPriceLimit)(swapXtoY)
                        .add(swapXtoY ? new bn_js_1.BN(1) : new bn_js_1.BN(-1))
                        .toString(10)), // sqrt price limit
                    tx.pure.u64("18446744073709551615"), // u64 max value
                    tx.object(config.version),
                    tx.object(utils_1.SUI_CLOCK_OBJECT_ID),
                ],
            });
            return coinOut;
        });
    }
}
exports.FlowxV3Contract = FlowxV3Contract;
