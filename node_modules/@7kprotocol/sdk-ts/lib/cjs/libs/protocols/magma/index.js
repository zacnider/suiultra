"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MagmaContract = void 0;
const base_1 = require("../base");
const utils_1 = require("@mysten/sui/utils");
const utils_2 = require("../utils");
const sui_1 = require("../../../utils/sui");
class MagmaContract extends base_1.BaseContract {
    swap(tx) {
        return __awaiter(this, void 0, void 0, function* () {
            const [coinX, coinY] = this.swapInfo.pool.allTokens;
            const swapXtoY = this.swapInfo.swapXtoY;
            const sqrtPriceLimit = (0, utils_2.getDefaultSqrtPriceLimit)(swapXtoY);
            const typeArguments = [coinX.address, coinY.address];
            const [zeroOut] = tx.moveCall({
                target: "0x2::coin::zero",
                typeArguments: [swapXtoY ? coinY.address : coinX.address],
            });
            const amountIn = sui_1.SuiUtils.getCoinValue(swapXtoY ? coinX.address : coinY.address, this.inputCoinObject, tx);
            const config = this.config.magma;
            const [receiveA, receiveB] = tx.moveCall({
                target: `${config.package}::router::swap`,
                typeArguments,
                arguments: [
                    tx.object(config.globalConfig),
                    tx.object(this.swapInfo.poolId),
                    swapXtoY ? this.inputCoinObject : zeroOut, // coin A
                    swapXtoY ? zeroOut : this.inputCoinObject, // coin B
                    tx.pure.bool(swapXtoY), // a to b or b to a
                    tx.pure.bool(true), // exact in or out
                    amountIn, // swap amount
                    tx.pure.u128(sqrtPriceLimit.toString()), // sqrt price limit
                    tx.pure.bool(false),
                    tx.object(utils_1.SUI_CLOCK_OBJECT_ID),
                ],
            });
            sui_1.SuiUtils.transferOrDestroyZeroCoin(tx, this.swapInfo.assetIn, swapXtoY ? receiveA : receiveB, this.currentAccount);
            console.log(tx);
            return swapXtoY ? receiveB : receiveA;
        });
    }
}
exports.MagmaContract = MagmaContract;
