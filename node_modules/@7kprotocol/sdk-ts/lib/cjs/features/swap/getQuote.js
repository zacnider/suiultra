"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_SOURCES = void 0;
exports.getQuote = getQuote;
const utils_1 = require("@mysten/sui/utils");
exports.DEFAULT_SOURCES = [
    "suiswap",
    "turbos",
    "cetus",
    "bluemove",
    "kriya",
    "kriya_v3",
    "aftermath",
    "deepbook",
    "deepbook_v3",
    "flowx",
    "flowx_v3",
    "bluefin",
    "springsui",
    "obric",
    "stsui",
    "steamm",
    "magma",
];
function getQuote(_a) {
    return __awaiter(this, arguments, void 0, function* ({ tokenIn, tokenOut, amountIn, sources = exports.DEFAULT_SOURCES, targetPools, excludedPools, }) {
        const params = new URLSearchParams({
            amount: amountIn,
            from: (0, utils_1.normalizeStructTag)(tokenIn),
            to: (0, utils_1.normalizeStructTag)(tokenOut),
            sources: sources.join(","),
        });
        if (targetPools === null || targetPools === void 0 ? void 0 : targetPools.length) {
            params.append("target_pools", targetPools.map((v) => (0, utils_1.normalizeSuiObjectId)(v)).join(","));
        }
        if (excludedPools === null || excludedPools === void 0 ? void 0 : excludedPools.length) {
            params.append("excluded_pools", excludedPools.map((v) => (0, utils_1.normalizeSuiObjectId)(v)).join(","));
        }
        const response = yield fetch(`https://api.7k.ag/quote?${params}`);
        if (!response.ok) {
            throw new Error("Failed to fetch aggregator quote");
        }
        const quoteResponse = (yield response.json());
        return quoteResponse;
    });
}
