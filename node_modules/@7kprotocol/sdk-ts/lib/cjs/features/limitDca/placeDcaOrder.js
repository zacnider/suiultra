"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.placeDcaOrder = placeDcaOrder;
const constants_1 = require("./constants");
const transactions_1 = require("@mysten/sui/transactions");
function placeDcaOrder(_a) {
    return __awaiter(this, arguments, void 0, function* ({ payCoinType, targetCoinType, payCoinAmountEach, numOrders, interval, slippage, minRate, maxRate, }) {
        const tx = new transactions_1.Transaction();
        const coinElements = [];
        for (let i = 0; i < numOrders; i++) {
            const coin = (0, transactions_1.coinWithBalance)({
                type: payCoinType,
                balance: payCoinAmountEach,
            });
            coinElements.push(coin);
        }
        const vectorCoin = tx.makeMoveVec({
            elements: coinElements,
        });
        tx.moveCall({
            target: `${constants_1.DCA_ORDER_MODULE_ID}::place_dca_order`,
            arguments: [
                tx.object(constants_1.GLOBAL_CONFIG_ID),
                vectorCoin,
                tx.pure.u64(interval),
                tx.pure.u64(slippage),
                tx.pure.u64(minRate),
                tx.pure.u64(maxRate),
                tx.object.clock(),
            ],
            typeArguments: [payCoinType, targetCoinType],
        });
        return tx;
    });
}
