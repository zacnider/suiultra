"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.placeLimitOrder = placeLimitOrder;
const getSplitCoinForTx_1 = require("../../libs/getSplitCoinForTx");
const token_1 = require("../../utils/token");
const constants_1 = require("./constants");
function placeLimitOrder(_a) {
    return __awaiter(this, arguments, void 0, function* ({ accountAddress, payCoinType, targetCoinType, payCoinAmount, rate, slippage, expireTs, devInspect, }) {
        const { tx, coinData: payCoin } = yield (0, getSplitCoinForTx_1.getSplitCoinForTx)(accountAddress, payCoinAmount.toString(), [payCoinAmount.toString()], (0, token_1.denormalizeTokenType)(payCoinType), undefined, devInspect);
        tx.moveCall({
            target: `${constants_1.LIMIT_ORDER_MODULE_ID}::place_limit_order`,
            arguments: [
                tx.object(constants_1.GLOBAL_CONFIG_ID),
                payCoin,
                tx.pure.u64(rate),
                tx.pure.u64(slippage),
                tx.pure.u64(expireTs),
                tx.object.clock(),
            ],
            typeArguments: [payCoinType, targetCoinType],
        });
        return tx;
    });
}
